-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Helper functions
CREATE OR REPLACE FUNCTION check_product_exists(product_id TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (SELECT 1 FROM mobile_products WHERE id = product_id)
           OR EXISTS (SELECT 1 FROM laptops WHERE id = product_id);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION check_blog_rating_limit(blog_id TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN (SELECT COUNT(*) FROM ratings WHERE blog_id = $1 AND created_at > NOW() - INTERVAL '1 hour') < 5;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create tables for the e-commerce website

-- Laptops table
CREATE TABLE IF NOT EXISTS laptops (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2),
    brand TEXT,
    model TEXT,
    processor TEXT,
    ram TEXT,
    storage TEXT,
    display TEXT,
    graphics TEXT,
    battery_life TEXT,
    weight TEXT,
    operating_system TEXT,
    category TEXT,
    image_url TEXT,
    affiliate_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Mobile products table
CREATE TABLE IF NOT EXISTS mobile_products (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    price DECIMAL(10,2),
    brand TEXT,
    model TEXT,
    processor TEXT,
    ram TEXT,
    storage TEXT,
    display TEXT,
    camera TEXT,
    battery TEXT,
    operating_system TEXT,
    category TEXT,
    image_url TEXT,
    affiliate_url TEXT,
    is_popular BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Product ratings table
CREATE TABLE IF NOT EXISTS product_ratings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id TEXT NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Product reviews table
CREATE TABLE IF NOT EXISTS product_reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id TEXT NOT NULL,
    user_name TEXT,
    user_email TEXT,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    title TEXT,
    content TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Blogs table
CREATE TABLE IF NOT EXISTS blogs (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    image_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Comments table
CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_type TEXT NOT NULL,
    content_id TEXT NOT NULL,
    user_name TEXT,
    user_email TEXT,
    comment TEXT NOT NULL,
    turnstile_token TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Ratings table
CREATE TABLE IF NOT EXISTS ratings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    blog_id TEXT NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Reviews table
CREATE TABLE IF NOT EXISTS reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_type TEXT NOT NULL,
    content_id TEXT NOT NULL,
    user_name TEXT,
    user_email TEXT,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    review TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Admin logs table
CREATE TABLE IF NOT EXISTS admin_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    action TEXT NOT NULL,
    details JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Expert reviews table
CREATE TABLE IF NOT EXISTS expert_reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id TEXT NOT NULL,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    rating DECIMAL(2,1) CHECK (rating >= 0 AND rating <= 10),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Amazon ads table
CREATE TABLE IF NOT EXISTS amazon_ads (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id TEXT NOT NULL,
    content TEXT,
    status TEXT DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Affiliate links table
CREATE TABLE IF NOT EXISTS affiliate_links (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id TEXT NOT NULL,
    url TEXT NOT NULL,
    platform TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Secrets table
CREATE TABLE IF NOT EXISTS secrets (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    value TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security
ALTER TABLE laptops ENABLE ROW LEVEL SECURITY;
ALTER TABLE mobile_products ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_ratings ENABLE ROW LEVEL SECURITY;
ALTER TABLE product_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE blogs ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE ratings ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE expert_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE amazon_ads ENABLE ROW LEVEL SECURITY;
ALTER TABLE affiliate_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE secrets ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies

-- Laptops policies
CREATE POLICY "Laptops are viewable by everyone" ON laptops FOR SELECT USING (true);
CREATE POLICY "Authenticated users can insert laptops" ON laptops FOR INSERT WITH CHECK (true);
CREATE POLICY "Authenticated users can update laptops" ON laptops FOR UPDATE USING (true) WITH CHECK (true);
CREATE POLICY "Authenticated users can delete laptops" ON laptops FOR DELETE USING (true);

-- Mobile products policies
CREATE POLICY "Allow public read access for mobile_products" ON mobile_products FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to create mobile_products" ON mobile_products FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow authenticated users to update mobile_products" ON mobile_products FOR UPDATE USING (true) WITH CHECK (true);
CREATE POLICY "Allow authenticated users to delete mobile_products" ON mobile_products FOR DELETE USING (true);
CREATE POLICY "Authenticated users can update popular status" ON mobile_products FOR UPDATE USING (true) WITH CHECK (true);

-- Product ratings policies
CREATE POLICY "Allow public read access for product_ratings" ON product_ratings FOR SELECT USING (true);
CREATE POLICY "Anyone can submit product ratings" ON product_ratings FOR INSERT WITH CHECK (check_product_exists(product_id));

-- Product reviews policies
CREATE POLICY "Allow public read access for product_reviews" ON product_reviews FOR SELECT USING (true);
CREATE POLICY "Anyone can submit product reviews" ON product_reviews 
    FOR INSERT WITH CHECK (check_product_exists(product_id) 
    AND (user_email IS NULL OR user_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'));

-- Blogs policies
CREATE POLICY "Allow public read access for blogs" ON blogs FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to create blogs" ON blogs FOR INSERT WITH CHECK (true);
CREATE POLICY "Allow authenticated users to update blogs" ON blogs FOR UPDATE USING (true) WITH CHECK (true);
CREATE POLICY "Allow authenticated users to delete blogs" ON blogs FOR DELETE USING (true);

-- Comments policies
CREATE POLICY "Allow public read access for comments" ON comments FOR SELECT USING (true);
CREATE POLICY "Allow public insert access for comments" ON comments 
    FOR INSERT WITH CHECK (
        CASE
            WHEN content_type = 'blog' THEN user_email IS NOT NULL AND turnstile_token IS NOT NULL
            ELSE true
        END
    );

-- Ratings policies
CREATE POLICY "Ratings are viewable by everyone" ON ratings FOR SELECT USING (true);
CREATE POLICY "Anyone can submit ratings" ON ratings FOR INSERT WITH CHECK (true);
CREATE POLICY "Rate limited ratings submission" ON ratings FOR INSERT WITH CHECK (check_blog_rating_limit(blog_id));

-- Reviews policies
CREATE POLICY "Allow public read access for reviews" ON reviews FOR SELECT USING (true);
CREATE POLICY "Allow public insert access for reviews" ON reviews FOR INSERT WITH CHECK (true);

-- Admin logs policies
CREATE POLICY "Allow admin read access" ON admin_logs FOR SELECT USING (auth.email() <> 'user1@admin.com');
CREATE POLICY "Allow all users to insert logs" ON admin_logs FOR INSERT WITH CHECK (true);

-- Expert reviews policies
CREATE POLICY "Expert reviews are viewable by everyone" ON expert_reviews FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create expert reviews" ON expert_reviews FOR INSERT WITH CHECK (true);

-- Amazon ads policies
CREATE POLICY "Amazon ads are viewable by everyone" ON amazon_ads FOR SELECT USING (true);
CREATE POLICY "Only authenticated users can manage amazon ads" ON amazon_ads FOR ALL USING (true) WITH CHECK (true);

-- Affiliate links policies
CREATE POLICY "Affiliate links are viewable by everyone" ON affiliate_links FOR SELECT USING (true);
CREATE POLICY "Only authenticated users can manage affiliate links" ON affiliate_links FOR ALL USING (true) WITH CHECK (true);

-- Secrets policies
CREATE POLICY "Secrets are viewable by everyone" ON secrets FOR SELECT USING (true);
CREATE POLICY "Only authenticated users can manage secrets" ON secrets FOR ALL USING (true) WITH CHECK (true);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_laptops_brand ON laptops(brand);
CREATE INDEX IF NOT EXISTS idx_laptops_category ON laptops(category);
CREATE INDEX IF NOT EXISTS idx_mobile_products_brand ON mobile_products(brand);
CREATE INDEX IF NOT EXISTS idx_mobile_products_category ON mobile_products(category);
CREATE INDEX IF NOT EXISTS idx_product_reviews_product_id ON product_reviews(product_id);
CREATE INDEX IF NOT EXISTS idx_product_ratings_product_id ON product_ratings(product_id);
CREATE INDEX IF NOT EXISTS idx_comments_content_type_id ON comments(content_type, content_id);
CREATE INDEX IF NOT EXISTS idx_ratings_blog_id ON ratings(blog_id);
CREATE INDEX IF NOT EXISTS idx_reviews_content_type_id ON reviews(content_type, content_id);
CREATE INDEX IF NOT EXISTS idx_affiliate_links_product_id ON affiliate_links(product_id);
CREATE INDEX IF NOT EXISTS idx_amazon_ads_product_id ON amazon_ads(product_id);
